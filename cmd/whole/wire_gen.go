// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/realotz/whole/internal/conf"
	"github.com/realotz/whole/internal/server"
	"github.com/realotz/whole/internal/services"
	"github.com/realotz/whole/internal/services/users"
	"github.com/realotz/whole/internal/services/users/biz"
	"github.com/realotz/whole/internal/services/users/data"
	"github.com/realotz/whole/internal/services/users/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, error) {
	httpServer := server.NewHTTPServer(confServer)
	middleware := server.NewMiddleware()
	grpcServer := server.NewGRPCServer(confServer, middleware)
	token, err := users.NewAuthToken(confData)
	if err != nil {
		return nil, err
	}
	dataData, err := data.NewData(confData, logger, token)
	if err != nil {
		return nil, err
	}
	employeeRepo := data.NewEmployeeRepo(dataData, logger)
	employeeUsecase := biz.NewEmployeeUsecase(employeeRepo, logger)
	employeeServiceServer := service.NewEmployeeService(employeeUsecase)
	messageServiceServer := service.NewMessageService()
	customerRepo := data.NewCustomerRepo(dataData, logger)
	customerUsecase := biz.NewCustomerUsecase(customerRepo, logger)
	customerServiceServer := service.NewCustomerService(customerUsecase)
	usersUsers := users.NewUsersApp(httpServer, grpcServer, middleware, employeeServiceServer, messageServiceServer, customerServiceServer)
	app := services.NewApps(usersUsers)
	kratosApp := newApp(logger, app)
	return kratosApp, nil
}
