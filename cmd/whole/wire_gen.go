// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/realotz/whole/internal/conf"
	"github.com/realotz/whole/internal/server"
	"github.com/realotz/whole/internal/services"
	"github.com/realotz/whole/internal/services/cms"
	"github.com/realotz/whole/internal/services/cms/biz"
	"github.com/realotz/whole/internal/services/cms/data"
	"github.com/realotz/whole/internal/services/cms/service"
	"github.com/realotz/whole/internal/services/systems"
	biz2 "github.com/realotz/whole/internal/services/systems/biz"
	data2 "github.com/realotz/whole/internal/services/systems/data"
	service2 "github.com/realotz/whole/internal/services/systems/service"
	"github.com/realotz/whole/internal/services/users"
	biz3 "github.com/realotz/whole/internal/services/users/biz"
	data3 "github.com/realotz/whole/internal/services/users/data"
	service3 "github.com/realotz/whole/internal/services/users/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, error) {
	httpServer := server.NewHTTPServer(confServer)
	middleware := server.NewMiddleware()
	grpcServer := server.NewGRPCServer(confServer, middleware)
	dataData, err := data.NewData(confData, logger)
	if err != nil {
		return nil, err
	}
	categoryRepo := data.NewCategoryRepo(dataData, logger)
	categoryUsecase := biz.NewCategoryUsecase(categoryRepo, logger)
	categoryServiceServer := service.NewCategoryServiceService(categoryUsecase)
	cmsCms := cms.NewCmsApp(httpServer, grpcServer, middleware, categoryServiceServer)
	data4, err := data2.NewData(confData, logger)
	if err != nil {
		return nil, err
	}
	fileRepo := data2.NewFileRepo(data4, logger)
	fileUsecase := biz2.NewFileUsecase(fileRepo, logger)
	fileServiceServer := service2.NewFileServiceService(fileUsecase)
	systemsSystems := systems.NewSystemsApp(httpServer, grpcServer, middleware, fileServiceServer)
	token, err := users.NewAuthToken(confData)
	if err != nil {
		return nil, err
	}
	data5, err := data3.NewData(confData, logger, token)
	if err != nil {
		return nil, err
	}
	employeeRepo := data3.NewEmployeeRepo(data5, logger)
	employeeUsecase := biz3.NewEmployeeUsecase(employeeRepo, logger)
	employeeServiceServer := service3.NewEmployeeService(employeeUsecase)
	messageServiceServer := service3.NewMessageService()
	customerRepo := data3.NewCustomerRepo(data5, logger)
	customerUsecase := biz3.NewCustomerUsecase(customerRepo, logger)
	customerServiceServer := service3.NewCustomerService(customerUsecase)
	usersUsers := users.NewUsersApp(httpServer, grpcServer, middleware, employeeServiceServer, messageServiceServer, customerServiceServer)
	app := services.NewApps(cmsCms, systemsSystems, usersUsers)
	kratosApp := newApp(logger, app)
	return kratosApp, nil
}
