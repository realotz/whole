// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realotz/whole/internal/services/cms/data/ent/category"
	"github.com/realotz/whole/internal/services/cms/data/ent/predicate"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// Where adds a new predicate for the CategoryUpdate builder.
func (cu *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CategoryUpdate) SetName(s string) *CategoryUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableName(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CategoryUpdate) ClearName() *CategoryUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetPid sets the "pid" field.
func (cu *CategoryUpdate) SetPid(i int64) *CategoryUpdate {
	cu.mutation.ResetPid()
	cu.mutation.SetPid(i)
	return cu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillablePid(i *int64) *CategoryUpdate {
	if i != nil {
		cu.SetPid(*i)
	}
	return cu
}

// AddPid adds i to the "pid" field.
func (cu *CategoryUpdate) AddPid(i int64) *CategoryUpdate {
	cu.mutation.AddPid(i)
	return cu
}

// ClearPid clears the value of the "pid" field.
func (cu *CategoryUpdate) ClearPid() *CategoryUpdate {
	cu.mutation.ClearPid()
	return cu
}

// SetIcon sets the "icon" field.
func (cu *CategoryUpdate) SetIcon(s string) *CategoryUpdate {
	cu.mutation.SetIcon(s)
	return cu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableIcon(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetIcon(*s)
	}
	return cu
}

// ClearIcon clears the value of the "icon" field.
func (cu *CategoryUpdate) ClearIcon() *CategoryUpdate {
	cu.mutation.ClearIcon()
	return cu
}

// SetDesc sets the "desc" field.
func (cu *CategoryUpdate) SetDesc(s string) *CategoryUpdate {
	cu.mutation.SetDesc(s)
	return cu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableDesc(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetDesc(*s)
	}
	return cu
}

// ClearDesc clears the value of the "desc" field.
func (cu *CategoryUpdate) ClearDesc() *CategoryUpdate {
	cu.mutation.ClearDesc()
	return cu
}

// Mutation returns the CategoryMutation object of the builder.
func (cu *CategoryUpdate) Mutation() *CategoryMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CategoryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CategoryUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := category.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *CategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   category.Table,
			Columns: category.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: category.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: category.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: category.FieldName,
		})
	}
	if cu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: category.FieldName,
		})
	}
	if value, ok := cu.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: category.FieldPid,
		})
	}
	if value, ok := cu.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: category.FieldPid,
		})
	}
	if cu.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: category.FieldPid,
		})
	}
	if value, ok := cu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: category.FieldIcon,
		})
	}
	if cu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: category.FieldIcon,
		})
	}
	if value, ok := cu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: category.FieldDesc,
		})
	}
	if cu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: category.FieldDesc,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// SetName sets the "name" field.
func (cuo *CategoryUpdateOne) SetName(s string) *CategoryUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableName(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CategoryUpdateOne) ClearName() *CategoryUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetPid sets the "pid" field.
func (cuo *CategoryUpdateOne) SetPid(i int64) *CategoryUpdateOne {
	cuo.mutation.ResetPid()
	cuo.mutation.SetPid(i)
	return cuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillablePid(i *int64) *CategoryUpdateOne {
	if i != nil {
		cuo.SetPid(*i)
	}
	return cuo
}

// AddPid adds i to the "pid" field.
func (cuo *CategoryUpdateOne) AddPid(i int64) *CategoryUpdateOne {
	cuo.mutation.AddPid(i)
	return cuo
}

// ClearPid clears the value of the "pid" field.
func (cuo *CategoryUpdateOne) ClearPid() *CategoryUpdateOne {
	cuo.mutation.ClearPid()
	return cuo
}

// SetIcon sets the "icon" field.
func (cuo *CategoryUpdateOne) SetIcon(s string) *CategoryUpdateOne {
	cuo.mutation.SetIcon(s)
	return cuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableIcon(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetIcon(*s)
	}
	return cuo
}

// ClearIcon clears the value of the "icon" field.
func (cuo *CategoryUpdateOne) ClearIcon() *CategoryUpdateOne {
	cuo.mutation.ClearIcon()
	return cuo
}

// SetDesc sets the "desc" field.
func (cuo *CategoryUpdateOne) SetDesc(s string) *CategoryUpdateOne {
	cuo.mutation.SetDesc(s)
	return cuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableDesc(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetDesc(*s)
	}
	return cuo
}

// ClearDesc clears the value of the "desc" field.
func (cuo *CategoryUpdateOne) ClearDesc() *CategoryUpdateOne {
	cuo.mutation.ClearDesc()
	return cuo
}

// Mutation returns the CategoryMutation object of the builder.
func (cuo *CategoryUpdateOne) Mutation() *CategoryMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated Category entity.
func (cuo *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	var (
		err  error
		node *Category
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CategoryUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := category.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   category.Table,
			Columns: category.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: category.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Category.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: category.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: category.FieldName,
		})
	}
	if cuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: category.FieldName,
		})
	}
	if value, ok := cuo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: category.FieldPid,
		})
	}
	if value, ok := cuo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: category.FieldPid,
		})
	}
	if cuo.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: category.FieldPid,
		})
	}
	if value, ok := cuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: category.FieldIcon,
		})
	}
	if cuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: category.FieldIcon,
		})
	}
	if value, ok := cuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: category.FieldDesc,
		})
	}
	if cuo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: category.FieldDesc,
		})
	}
	_node = &Category{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
