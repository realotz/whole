// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/realotz/whole/internal/apps/admin/data/ent/employee"
	"github.com/realotz/whole/internal/apps/admin/data/ent/predicate"
	"github.com/realotz/whole/internal/apps/admin/data/ent/role"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where adds a new predicate for the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetSex sets the "sex" field.
func (eu *EmployeeUpdate) SetSex(e employee.Sex) *EmployeeUpdate {
	eu.mutation.SetSex(e)
	return eu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableSex(e *employee.Sex) *EmployeeUpdate {
	if e != nil {
		eu.SetSex(*e)
	}
	return eu
}

// SetUUID sets the "uuid" field.
func (eu *EmployeeUpdate) SetUUID(u uuid.UUID) *EmployeeUpdate {
	eu.mutation.SetUUID(u)
	return eu
}

// SetAccount sets the "account" field.
func (eu *EmployeeUpdate) SetAccount(s string) *EmployeeUpdate {
	eu.mutation.SetAccount(s)
	return eu
}

// SetAvatar sets the "avatar" field.
func (eu *EmployeeUpdate) SetAvatar(s string) *EmployeeUpdate {
	eu.mutation.SetAvatar(s)
	return eu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableAvatar(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetAvatar(*s)
	}
	return eu
}

// ClearAvatar clears the value of the "avatar" field.
func (eu *EmployeeUpdate) ClearAvatar() *EmployeeUpdate {
	eu.mutation.ClearAvatar()
	return eu
}

// SetName sets the "name" field.
func (eu *EmployeeUpdate) SetName(s string) *EmployeeUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableName(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *EmployeeUpdate) ClearName() *EmployeeUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetEmail sets the "email" field.
func (eu *EmployeeUpdate) SetEmail(s string) *EmployeeUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetMobile sets the "mobile" field.
func (eu *EmployeeUpdate) SetMobile(s string) *EmployeeUpdate {
	eu.mutation.SetMobile(s)
	return eu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableMobile(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetMobile(*s)
	}
	return eu
}

// ClearMobile clears the value of the "mobile" field.
func (eu *EmployeeUpdate) ClearMobile() *EmployeeUpdate {
	eu.mutation.ClearMobile()
	return eu
}

// SetIDCard sets the "id_card" field.
func (eu *EmployeeUpdate) SetIDCard(s string) *EmployeeUpdate {
	eu.mutation.SetIDCard(s)
	return eu
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableIDCard(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetIDCard(*s)
	}
	return eu
}

// ClearIDCard clears the value of the "id_card" field.
func (eu *EmployeeUpdate) ClearIDCard() *EmployeeUpdate {
	eu.mutation.ClearIDCard()
	return eu
}

// SetBirthday sets the "birthday" field.
func (eu *EmployeeUpdate) SetBirthday(t time.Time) *EmployeeUpdate {
	eu.mutation.SetBirthday(t)
	return eu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableBirthday(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetBirthday(*t)
	}
	return eu
}

// ClearBirthday clears the value of the "birthday" field.
func (eu *EmployeeUpdate) ClearBirthday() *EmployeeUpdate {
	eu.mutation.ClearBirthday()
	return eu
}

// SetPassword sets the "password" field.
func (eu *EmployeeUpdate) SetPassword(s string) *EmployeeUpdate {
	eu.mutation.SetPassword(s)
	return eu
}

// SetSalt sets the "salt" field.
func (eu *EmployeeUpdate) SetSalt(s string) *EmployeeUpdate {
	eu.mutation.SetSalt(s)
	return eu
}

// SetLastIP sets the "last_ip" field.
func (eu *EmployeeUpdate) SetLastIP(s string) *EmployeeUpdate {
	eu.mutation.SetLastIP(s)
	return eu
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableLastIP(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetLastIP(*s)
	}
	return eu
}

// ClearLastIP clears the value of the "last_ip" field.
func (eu *EmployeeUpdate) ClearLastIP() *EmployeeUpdate {
	eu.mutation.ClearLastIP()
	return eu
}

// SetLastTime sets the "last_time" field.
func (eu *EmployeeUpdate) SetLastTime(t time.Time) *EmployeeUpdate {
	eu.mutation.SetLastTime(t)
	return eu
}

// SetNillableLastTime sets the "last_time" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableLastTime(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetLastTime(*t)
	}
	return eu
}

// ClearLastTime clears the value of the "last_time" field.
func (eu *EmployeeUpdate) ClearLastTime() *EmployeeUpdate {
	eu.mutation.ClearLastTime()
	return eu
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (eu *EmployeeUpdate) AddRoleIDs(ids ...int64) *EmployeeUpdate {
	eu.mutation.AddRoleIDs(ids...)
	return eu
}

// AddRoles adds the "roles" edges to the Role entity.
func (eu *EmployeeUpdate) AddRoles(r ...*Role) *EmployeeUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRoleIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (eu *EmployeeUpdate) ClearRoles() *EmployeeUpdate {
	eu.mutation.ClearRoles()
	return eu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (eu *EmployeeUpdate) RemoveRoleIDs(ids ...int64) *EmployeeUpdate {
	eu.mutation.RemoveRoleIDs(ids...)
	return eu
}

// RemoveRoles removes "roles" edges to Role entities.
func (eu *EmployeeUpdate) RemoveRoles(r ...*Role) *EmployeeUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := employee.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.Sex(); ok {
		if err := employee.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf("ent: validator failed for field \"sex\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Account(); ok {
		if err := employee.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf("ent: validator failed for field \"account\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Salt(); ok {
		if err := employee.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf("ent: validator failed for field \"salt\": %w", err)}
		}
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: employee.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldUpdateTime,
		})
	}
	if value, ok := eu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: employee.FieldSex,
		})
	}
	if value, ok := eu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: employee.FieldUUID,
		})
	}
	if value, ok := eu.mutation.Account(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldAccount,
		})
	}
	if value, ok := eu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldAvatar,
		})
	}
	if eu.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldAvatar,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
	}
	if eu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldName,
		})
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := eu.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldMobile,
		})
	}
	if eu.mutation.MobileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldMobile,
		})
	}
	if value, ok := eu.mutation.IDCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldIDCard,
		})
	}
	if eu.mutation.IDCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldIDCard,
		})
	}
	if value, ok := eu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldBirthday,
		})
	}
	if eu.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: employee.FieldBirthday,
		})
	}
	if value, ok := eu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
	}
	if value, ok := eu.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldSalt,
		})
	}
	if value, ok := eu.mutation.LastIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldLastIP,
		})
	}
	if eu.mutation.LastIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldLastIP,
		})
	}
	if value, ok := eu.mutation.LastTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldLastTime,
		})
	}
	if eu.mutation.LastTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: employee.FieldLastTime,
		})
	}
	if eu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.RolesTable,
			Columns: employee.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !eu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.RolesTable,
			Columns: employee.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.RolesTable,
			Columns: employee.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetSex sets the "sex" field.
func (euo *EmployeeUpdateOne) SetSex(e employee.Sex) *EmployeeUpdateOne {
	euo.mutation.SetSex(e)
	return euo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableSex(e *employee.Sex) *EmployeeUpdateOne {
	if e != nil {
		euo.SetSex(*e)
	}
	return euo
}

// SetUUID sets the "uuid" field.
func (euo *EmployeeUpdateOne) SetUUID(u uuid.UUID) *EmployeeUpdateOne {
	euo.mutation.SetUUID(u)
	return euo
}

// SetAccount sets the "account" field.
func (euo *EmployeeUpdateOne) SetAccount(s string) *EmployeeUpdateOne {
	euo.mutation.SetAccount(s)
	return euo
}

// SetAvatar sets the "avatar" field.
func (euo *EmployeeUpdateOne) SetAvatar(s string) *EmployeeUpdateOne {
	euo.mutation.SetAvatar(s)
	return euo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableAvatar(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetAvatar(*s)
	}
	return euo
}

// ClearAvatar clears the value of the "avatar" field.
func (euo *EmployeeUpdateOne) ClearAvatar() *EmployeeUpdateOne {
	euo.mutation.ClearAvatar()
	return euo
}

// SetName sets the "name" field.
func (euo *EmployeeUpdateOne) SetName(s string) *EmployeeUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableName(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *EmployeeUpdateOne) ClearName() *EmployeeUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetEmail sets the "email" field.
func (euo *EmployeeUpdateOne) SetEmail(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetMobile sets the "mobile" field.
func (euo *EmployeeUpdateOne) SetMobile(s string) *EmployeeUpdateOne {
	euo.mutation.SetMobile(s)
	return euo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableMobile(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetMobile(*s)
	}
	return euo
}

// ClearMobile clears the value of the "mobile" field.
func (euo *EmployeeUpdateOne) ClearMobile() *EmployeeUpdateOne {
	euo.mutation.ClearMobile()
	return euo
}

// SetIDCard sets the "id_card" field.
func (euo *EmployeeUpdateOne) SetIDCard(s string) *EmployeeUpdateOne {
	euo.mutation.SetIDCard(s)
	return euo
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableIDCard(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetIDCard(*s)
	}
	return euo
}

// ClearIDCard clears the value of the "id_card" field.
func (euo *EmployeeUpdateOne) ClearIDCard() *EmployeeUpdateOne {
	euo.mutation.ClearIDCard()
	return euo
}

// SetBirthday sets the "birthday" field.
func (euo *EmployeeUpdateOne) SetBirthday(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetBirthday(t)
	return euo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableBirthday(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetBirthday(*t)
	}
	return euo
}

// ClearBirthday clears the value of the "birthday" field.
func (euo *EmployeeUpdateOne) ClearBirthday() *EmployeeUpdateOne {
	euo.mutation.ClearBirthday()
	return euo
}

// SetPassword sets the "password" field.
func (euo *EmployeeUpdateOne) SetPassword(s string) *EmployeeUpdateOne {
	euo.mutation.SetPassword(s)
	return euo
}

// SetSalt sets the "salt" field.
func (euo *EmployeeUpdateOne) SetSalt(s string) *EmployeeUpdateOne {
	euo.mutation.SetSalt(s)
	return euo
}

// SetLastIP sets the "last_ip" field.
func (euo *EmployeeUpdateOne) SetLastIP(s string) *EmployeeUpdateOne {
	euo.mutation.SetLastIP(s)
	return euo
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableLastIP(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetLastIP(*s)
	}
	return euo
}

// ClearLastIP clears the value of the "last_ip" field.
func (euo *EmployeeUpdateOne) ClearLastIP() *EmployeeUpdateOne {
	euo.mutation.ClearLastIP()
	return euo
}

// SetLastTime sets the "last_time" field.
func (euo *EmployeeUpdateOne) SetLastTime(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetLastTime(t)
	return euo
}

// SetNillableLastTime sets the "last_time" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableLastTime(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetLastTime(*t)
	}
	return euo
}

// ClearLastTime clears the value of the "last_time" field.
func (euo *EmployeeUpdateOne) ClearLastTime() *EmployeeUpdateOne {
	euo.mutation.ClearLastTime()
	return euo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (euo *EmployeeUpdateOne) AddRoleIDs(ids ...int64) *EmployeeUpdateOne {
	euo.mutation.AddRoleIDs(ids...)
	return euo
}

// AddRoles adds the "roles" edges to the Role entity.
func (euo *EmployeeUpdateOne) AddRoles(r ...*Role) *EmployeeUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRoleIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (euo *EmployeeUpdateOne) ClearRoles() *EmployeeUpdateOne {
	euo.mutation.ClearRoles()
	return euo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (euo *EmployeeUpdateOne) RemoveRoleIDs(ids ...int64) *EmployeeUpdateOne {
	euo.mutation.RemoveRoleIDs(ids...)
	return euo
}

// RemoveRoles removes "roles" edges to Role entities.
func (euo *EmployeeUpdateOne) RemoveRoles(r ...*Role) *EmployeeUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	var (
		err  error
		node *Employee
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := employee.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.Sex(); ok {
		if err := employee.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf("ent: validator failed for field \"sex\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Account(); ok {
		if err := employee.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf("ent: validator failed for field \"account\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Salt(); ok {
		if err := employee.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf("ent: validator failed for field \"salt\": %w", err)}
		}
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: employee.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Employee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldUpdateTime,
		})
	}
	if value, ok := euo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: employee.FieldSex,
		})
	}
	if value, ok := euo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: employee.FieldUUID,
		})
	}
	if value, ok := euo.mutation.Account(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldAccount,
		})
	}
	if value, ok := euo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldAvatar,
		})
	}
	if euo.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldAvatar,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldName,
		})
	}
	if euo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldName,
		})
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := euo.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldMobile,
		})
	}
	if euo.mutation.MobileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldMobile,
		})
	}
	if value, ok := euo.mutation.IDCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldIDCard,
		})
	}
	if euo.mutation.IDCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldIDCard,
		})
	}
	if value, ok := euo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldBirthday,
		})
	}
	if euo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: employee.FieldBirthday,
		})
	}
	if value, ok := euo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
	}
	if value, ok := euo.mutation.Salt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldSalt,
		})
	}
	if value, ok := euo.mutation.LastIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldLastIP,
		})
	}
	if euo.mutation.LastIPCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: employee.FieldLastIP,
		})
	}
	if value, ok := euo.mutation.LastTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldLastTime,
		})
	}
	if euo.mutation.LastTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: employee.FieldLastTime,
		})
	}
	if euo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.RolesTable,
			Columns: employee.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !euo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.RolesTable,
			Columns: employee.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   employee.RolesTable,
			Columns: employee.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
