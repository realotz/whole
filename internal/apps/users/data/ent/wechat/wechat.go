// Code generated by entc, DO NOT EDIT.

package wechat

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the wechat type in the database.
	Label = "wechat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldOpenid holds the string denoting the openid field in the database.
	FieldOpenid = "openid"
	// FieldUnionId holds the string denoting the unionid field in the database.
	FieldUnionId = "union_id"
	// FieldAppType holds the string denoting the app_type field in the database.
	FieldAppType = "app_type"
	// FieldMetaData holds the string denoting the meta_data field in the database.
	FieldMetaData = "meta_data"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the wechat in the database.
	Table = "wechats"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "wechats"
	// OwnerInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	OwnerInverseTable = "members"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "member_wechats"
)

// Columns holds all SQL columns for wechat fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldOpenid,
	FieldUnionId,
	FieldAppType,
	FieldMetaData,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "wechats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"member_wechats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// OpenidValidator is a validator for the "openid" field. It is called by the builders before save.
	OpenidValidator func(string) error
	// UnionIdValidator is a validator for the "unionId" field. It is called by the builders before save.
	UnionIdValidator func(string) error
)

// AppType defines the type for the "app_type" enum field.
type AppType string

// AppType values.
const (
	AppTypeWeapp           AppType = "weapp"
	AppTypeOfficialAccount AppType = "official_account"
)

func (at AppType) String() string {
	return string(at)
}

// AppTypeValidator is a validator for the "app_type" field enum values. It is called by the builders before save.
func AppTypeValidator(at AppType) error {
	switch at {
	case AppTypeWeapp, AppTypeOfficialAccount:
		return nil
	default:
		return fmt.Errorf("wechat: invalid enum value for app_type field: %q", at)
	}
}
