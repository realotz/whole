// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/realotz/whole/internal/apps/users/data/ent/member"
	"github.com/realotz/whole/internal/apps/users/data/ent/predicate"
	"github.com/realotz/whole/internal/apps/users/data/ent/wechat"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMember = "Member"
	TypeWechat = "Wechat"
)

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	create_time    *time.Time
	update_time    *time.Time
	sex            *member.Sex
	uuid           *uuid.UUID
	account        *string
	name           *string
	role           *string
	nick_name      *string
	email          *string
	mobile         *string
	id_card        *string
	birthday       *time.Time
	password       *string
	salt           *string
	last_ip        *string
	last_time      *time.Time
	clearedFields  map[string]struct{}
	wechats        map[int]struct{}
	removedwechats map[int]struct{}
	clearedwechats bool
	done           bool
	oldValue       func(context.Context) (*Member, error)
	predicates     []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id int64) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Member entities.
func (m *MemberMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MemberMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *MemberMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MemberMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MemberMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MemberMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MemberMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MemberMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetSex sets the "sex" field.
func (m *MemberMutation) SetSex(value member.Sex) {
	m.sex = &value
}

// Sex returns the value of the "sex" field in the mutation.
func (m *MemberMutation) Sex() (r member.Sex, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSex(ctx context.Context) (v member.Sex, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// ResetSex resets all changes to the "sex" field.
func (m *MemberMutation) ResetSex() {
	m.sex = nil
}

// SetUUID sets the "uuid" field.
func (m *MemberMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *MemberMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *MemberMutation) ResetUUID() {
	m.uuid = nil
}

// SetAccount sets the "account" field.
func (m *MemberMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *MemberMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *MemberMutation) ResetAccount() {
	m.account = nil
}

// SetName sets the "name" field.
func (m *MemberMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MemberMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *MemberMutation) ClearName() {
	m.name = nil
	m.clearedFields[member.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *MemberMutation) NameCleared() bool {
	_, ok := m.clearedFields[member.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *MemberMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, member.FieldName)
}

// SetRole sets the "role" field.
func (m *MemberMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *MemberMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ClearRole clears the value of the "role" field.
func (m *MemberMutation) ClearRole() {
	m.role = nil
	m.clearedFields[member.FieldRole] = struct{}{}
}

// RoleCleared returns if the "role" field was cleared in this mutation.
func (m *MemberMutation) RoleCleared() bool {
	_, ok := m.clearedFields[member.FieldRole]
	return ok
}

// ResetRole resets all changes to the "role" field.
func (m *MemberMutation) ResetRole() {
	m.role = nil
	delete(m.clearedFields, member.FieldRole)
}

// SetNickName sets the "nick_name" field.
func (m *MemberMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *MemberMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ClearNickName clears the value of the "nick_name" field.
func (m *MemberMutation) ClearNickName() {
	m.nick_name = nil
	m.clearedFields[member.FieldNickName] = struct{}{}
}

// NickNameCleared returns if the "nick_name" field was cleared in this mutation.
func (m *MemberMutation) NickNameCleared() bool {
	_, ok := m.clearedFields[member.FieldNickName]
	return ok
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *MemberMutation) ResetNickName() {
	m.nick_name = nil
	delete(m.clearedFields, member.FieldNickName)
}

// SetEmail sets the "email" field.
func (m *MemberMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MemberMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *MemberMutation) ResetEmail() {
	m.email = nil
}

// SetMobile sets the "mobile" field.
func (m *MemberMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *MemberMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *MemberMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[member.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *MemberMutation) MobileCleared() bool {
	_, ok := m.clearedFields[member.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *MemberMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, member.FieldMobile)
}

// SetIDCard sets the "id_card" field.
func (m *MemberMutation) SetIDCard(s string) {
	m.id_card = &s
}

// IDCard returns the value of the "id_card" field in the mutation.
func (m *MemberMutation) IDCard() (r string, exists bool) {
	v := m.id_card
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCard returns the old "id_card" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldIDCard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIDCard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIDCard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCard: %w", err)
	}
	return oldValue.IDCard, nil
}

// ClearIDCard clears the value of the "id_card" field.
func (m *MemberMutation) ClearIDCard() {
	m.id_card = nil
	m.clearedFields[member.FieldIDCard] = struct{}{}
}

// IDCardCleared returns if the "id_card" field was cleared in this mutation.
func (m *MemberMutation) IDCardCleared() bool {
	_, ok := m.clearedFields[member.FieldIDCard]
	return ok
}

// ResetIDCard resets all changes to the "id_card" field.
func (m *MemberMutation) ResetIDCard() {
	m.id_card = nil
	delete(m.clearedFields, member.FieldIDCard)
}

// SetBirthday sets the "birthday" field.
func (m *MemberMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *MemberMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *MemberMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[member.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *MemberMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[member.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *MemberMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, member.FieldBirthday)
}

// SetPassword sets the "password" field.
func (m *MemberMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *MemberMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *MemberMutation) ResetPassword() {
	m.password = nil
}

// SetSalt sets the "salt" field.
func (m *MemberMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *MemberMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *MemberMutation) ResetSalt() {
	m.salt = nil
}

// SetLastIP sets the "last_ip" field.
func (m *MemberMutation) SetLastIP(s string) {
	m.last_ip = &s
}

// LastIP returns the value of the "last_ip" field in the mutation.
func (m *MemberMutation) LastIP() (r string, exists bool) {
	v := m.last_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastIP returns the old "last_ip" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldLastIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastIP: %w", err)
	}
	return oldValue.LastIP, nil
}

// ClearLastIP clears the value of the "last_ip" field.
func (m *MemberMutation) ClearLastIP() {
	m.last_ip = nil
	m.clearedFields[member.FieldLastIP] = struct{}{}
}

// LastIPCleared returns if the "last_ip" field was cleared in this mutation.
func (m *MemberMutation) LastIPCleared() bool {
	_, ok := m.clearedFields[member.FieldLastIP]
	return ok
}

// ResetLastIP resets all changes to the "last_ip" field.
func (m *MemberMutation) ResetLastIP() {
	m.last_ip = nil
	delete(m.clearedFields, member.FieldLastIP)
}

// SetLastTime sets the "last_time" field.
func (m *MemberMutation) SetLastTime(t time.Time) {
	m.last_time = &t
}

// LastTime returns the value of the "last_time" field in the mutation.
func (m *MemberMutation) LastTime() (r time.Time, exists bool) {
	v := m.last_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastTime returns the old "last_time" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldLastTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastTime: %w", err)
	}
	return oldValue.LastTime, nil
}

// ClearLastTime clears the value of the "last_time" field.
func (m *MemberMutation) ClearLastTime() {
	m.last_time = nil
	m.clearedFields[member.FieldLastTime] = struct{}{}
}

// LastTimeCleared returns if the "last_time" field was cleared in this mutation.
func (m *MemberMutation) LastTimeCleared() bool {
	_, ok := m.clearedFields[member.FieldLastTime]
	return ok
}

// ResetLastTime resets all changes to the "last_time" field.
func (m *MemberMutation) ResetLastTime() {
	m.last_time = nil
	delete(m.clearedFields, member.FieldLastTime)
}

// AddWechatIDs adds the "wechats" edge to the Wechat entity by ids.
func (m *MemberMutation) AddWechatIDs(ids ...int) {
	if m.wechats == nil {
		m.wechats = make(map[int]struct{})
	}
	for i := range ids {
		m.wechats[ids[i]] = struct{}{}
	}
}

// ClearWechats clears the "wechats" edge to the Wechat entity.
func (m *MemberMutation) ClearWechats() {
	m.clearedwechats = true
}

// WechatsCleared returns if the "wechats" edge to the Wechat entity was cleared.
func (m *MemberMutation) WechatsCleared() bool {
	return m.clearedwechats
}

// RemoveWechatIDs removes the "wechats" edge to the Wechat entity by IDs.
func (m *MemberMutation) RemoveWechatIDs(ids ...int) {
	if m.removedwechats == nil {
		m.removedwechats = make(map[int]struct{})
	}
	for i := range ids {
		m.removedwechats[ids[i]] = struct{}{}
	}
}

// RemovedWechats returns the removed IDs of the "wechats" edge to the Wechat entity.
func (m *MemberMutation) RemovedWechatsIDs() (ids []int) {
	for id := range m.removedwechats {
		ids = append(ids, id)
	}
	return
}

// WechatsIDs returns the "wechats" edge IDs in the mutation.
func (m *MemberMutation) WechatsIDs() (ids []int) {
	for id := range m.wechats {
		ids = append(ids, id)
	}
	return
}

// ResetWechats resets all changes to the "wechats" edge.
func (m *MemberMutation) ResetWechats() {
	m.wechats = nil
	m.clearedwechats = false
	m.removedwechats = nil
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.create_time != nil {
		fields = append(fields, member.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, member.FieldUpdateTime)
	}
	if m.sex != nil {
		fields = append(fields, member.FieldSex)
	}
	if m.uuid != nil {
		fields = append(fields, member.FieldUUID)
	}
	if m.account != nil {
		fields = append(fields, member.FieldAccount)
	}
	if m.name != nil {
		fields = append(fields, member.FieldName)
	}
	if m.role != nil {
		fields = append(fields, member.FieldRole)
	}
	if m.nick_name != nil {
		fields = append(fields, member.FieldNickName)
	}
	if m.email != nil {
		fields = append(fields, member.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, member.FieldMobile)
	}
	if m.id_card != nil {
		fields = append(fields, member.FieldIDCard)
	}
	if m.birthday != nil {
		fields = append(fields, member.FieldBirthday)
	}
	if m.password != nil {
		fields = append(fields, member.FieldPassword)
	}
	if m.salt != nil {
		fields = append(fields, member.FieldSalt)
	}
	if m.last_ip != nil {
		fields = append(fields, member.FieldLastIP)
	}
	if m.last_time != nil {
		fields = append(fields, member.FieldLastTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case member.FieldCreateTime:
		return m.CreateTime()
	case member.FieldUpdateTime:
		return m.UpdateTime()
	case member.FieldSex:
		return m.Sex()
	case member.FieldUUID:
		return m.UUID()
	case member.FieldAccount:
		return m.Account()
	case member.FieldName:
		return m.Name()
	case member.FieldRole:
		return m.Role()
	case member.FieldNickName:
		return m.NickName()
	case member.FieldEmail:
		return m.Email()
	case member.FieldMobile:
		return m.Mobile()
	case member.FieldIDCard:
		return m.IDCard()
	case member.FieldBirthday:
		return m.Birthday()
	case member.FieldPassword:
		return m.Password()
	case member.FieldSalt:
		return m.Salt()
	case member.FieldLastIP:
		return m.LastIP()
	case member.FieldLastTime:
		return m.LastTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case member.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case member.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case member.FieldSex:
		return m.OldSex(ctx)
	case member.FieldUUID:
		return m.OldUUID(ctx)
	case member.FieldAccount:
		return m.OldAccount(ctx)
	case member.FieldName:
		return m.OldName(ctx)
	case member.FieldRole:
		return m.OldRole(ctx)
	case member.FieldNickName:
		return m.OldNickName(ctx)
	case member.FieldEmail:
		return m.OldEmail(ctx)
	case member.FieldMobile:
		return m.OldMobile(ctx)
	case member.FieldIDCard:
		return m.OldIDCard(ctx)
	case member.FieldBirthday:
		return m.OldBirthday(ctx)
	case member.FieldPassword:
		return m.OldPassword(ctx)
	case member.FieldSalt:
		return m.OldSalt(ctx)
	case member.FieldLastIP:
		return m.OldLastIP(ctx)
	case member.FieldLastTime:
		return m.OldLastTime(ctx)
	}
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case member.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case member.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case member.FieldSex:
		v, ok := value.(member.Sex)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case member.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case member.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case member.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case member.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case member.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case member.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case member.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case member.FieldIDCard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCard(v)
		return nil
	case member.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case member.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case member.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case member.FieldLastIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastIP(v)
		return nil
	case member.FieldLastTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastTime(v)
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(member.FieldName) {
		fields = append(fields, member.FieldName)
	}
	if m.FieldCleared(member.FieldRole) {
		fields = append(fields, member.FieldRole)
	}
	if m.FieldCleared(member.FieldNickName) {
		fields = append(fields, member.FieldNickName)
	}
	if m.FieldCleared(member.FieldMobile) {
		fields = append(fields, member.FieldMobile)
	}
	if m.FieldCleared(member.FieldIDCard) {
		fields = append(fields, member.FieldIDCard)
	}
	if m.FieldCleared(member.FieldBirthday) {
		fields = append(fields, member.FieldBirthday)
	}
	if m.FieldCleared(member.FieldLastIP) {
		fields = append(fields, member.FieldLastIP)
	}
	if m.FieldCleared(member.FieldLastTime) {
		fields = append(fields, member.FieldLastTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	switch name {
	case member.FieldName:
		m.ClearName()
		return nil
	case member.FieldRole:
		m.ClearRole()
		return nil
	case member.FieldNickName:
		m.ClearNickName()
		return nil
	case member.FieldMobile:
		m.ClearMobile()
		return nil
	case member.FieldIDCard:
		m.ClearIDCard()
		return nil
	case member.FieldBirthday:
		m.ClearBirthday()
		return nil
	case member.FieldLastIP:
		m.ClearLastIP()
		return nil
	case member.FieldLastTime:
		m.ClearLastTime()
		return nil
	}
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	switch name {
	case member.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case member.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case member.FieldSex:
		m.ResetSex()
		return nil
	case member.FieldUUID:
		m.ResetUUID()
		return nil
	case member.FieldAccount:
		m.ResetAccount()
		return nil
	case member.FieldName:
		m.ResetName()
		return nil
	case member.FieldRole:
		m.ResetRole()
		return nil
	case member.FieldNickName:
		m.ResetNickName()
		return nil
	case member.FieldEmail:
		m.ResetEmail()
		return nil
	case member.FieldMobile:
		m.ResetMobile()
		return nil
	case member.FieldIDCard:
		m.ResetIDCard()
		return nil
	case member.FieldBirthday:
		m.ResetBirthday()
		return nil
	case member.FieldPassword:
		m.ResetPassword()
		return nil
	case member.FieldSalt:
		m.ResetSalt()
		return nil
	case member.FieldLastIP:
		m.ResetLastIP()
		return nil
	case member.FieldLastTime:
		m.ResetLastTime()
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.wechats != nil {
		edges = append(edges, member.EdgeWechats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case member.EdgeWechats:
		ids := make([]ent.Value, 0, len(m.wechats))
		for id := range m.wechats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedwechats != nil {
		edges = append(edges, member.EdgeWechats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case member.EdgeWechats:
		ids := make([]ent.Value, 0, len(m.removedwechats))
		for id := range m.removedwechats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwechats {
		edges = append(edges, member.EdgeWechats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	switch name {
	case member.EdgeWechats:
		return m.clearedwechats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	switch name {
	case member.EdgeWechats:
		m.ResetWechats()
		return nil
	}
	return fmt.Errorf("unknown Member edge %s", name)
}

// WechatMutation represents an operation that mutates the Wechat nodes in the graph.
type WechatMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	openid        *string
	unionId       *string
	app_type      *wechat.AppType
	meta_data     *[]byte
	clearedFields map[string]struct{}
	owner         *int64
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Wechat, error)
	predicates    []predicate.Wechat
}

var _ ent.Mutation = (*WechatMutation)(nil)

// wechatOption allows management of the mutation configuration using functional options.
type wechatOption func(*WechatMutation)

// newWechatMutation creates new mutation for the Wechat entity.
func newWechatMutation(c config, op Op, opts ...wechatOption) *WechatMutation {
	m := &WechatMutation{
		config:        c,
		op:            op,
		typ:           TypeWechat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWechatID sets the ID field of the mutation.
func withWechatID(id int) wechatOption {
	return func(m *WechatMutation) {
		var (
			err   error
			once  sync.Once
			value *Wechat
		)
		m.oldValue = func(ctx context.Context) (*Wechat, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wechat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWechat sets the old Wechat of the mutation.
func withWechat(node *Wechat) wechatOption {
	return func(m *WechatMutation) {
		m.oldValue = func(context.Context) (*Wechat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WechatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WechatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *WechatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *WechatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WechatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Wechat entity.
// If the Wechat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WechatMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *WechatMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *WechatMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Wechat entity.
// If the Wechat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *WechatMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetOpenid sets the "openid" field.
func (m *WechatMutation) SetOpenid(s string) {
	m.openid = &s
}

// Openid returns the value of the "openid" field in the mutation.
func (m *WechatMutation) Openid() (r string, exists bool) {
	v := m.openid
	if v == nil {
		return
	}
	return *v, true
}

// OldOpenid returns the old "openid" field's value of the Wechat entity.
// If the Wechat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatMutation) OldOpenid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOpenid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOpenid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpenid: %w", err)
	}
	return oldValue.Openid, nil
}

// ResetOpenid resets all changes to the "openid" field.
func (m *WechatMutation) ResetOpenid() {
	m.openid = nil
}

// SetUnionId sets the "unionId" field.
func (m *WechatMutation) SetUnionId(s string) {
	m.unionId = &s
}

// UnionId returns the value of the "unionId" field in the mutation.
func (m *WechatMutation) UnionId() (r string, exists bool) {
	v := m.unionId
	if v == nil {
		return
	}
	return *v, true
}

// OldUnionId returns the old "unionId" field's value of the Wechat entity.
// If the Wechat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatMutation) OldUnionId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnionId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnionId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnionId: %w", err)
	}
	return oldValue.UnionId, nil
}

// ResetUnionId resets all changes to the "unionId" field.
func (m *WechatMutation) ResetUnionId() {
	m.unionId = nil
}

// SetAppType sets the "app_type" field.
func (m *WechatMutation) SetAppType(wt wechat.AppType) {
	m.app_type = &wt
}

// AppType returns the value of the "app_type" field in the mutation.
func (m *WechatMutation) AppType() (r wechat.AppType, exists bool) {
	v := m.app_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAppType returns the old "app_type" field's value of the Wechat entity.
// If the Wechat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatMutation) OldAppType(ctx context.Context) (v wechat.AppType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppType: %w", err)
	}
	return oldValue.AppType, nil
}

// ResetAppType resets all changes to the "app_type" field.
func (m *WechatMutation) ResetAppType() {
	m.app_type = nil
}

// SetMetaData sets the "meta_data" field.
func (m *WechatMutation) SetMetaData(b []byte) {
	m.meta_data = &b
}

// MetaData returns the value of the "meta_data" field in the mutation.
func (m *WechatMutation) MetaData() (r []byte, exists bool) {
	v := m.meta_data
	if v == nil {
		return
	}
	return *v, true
}

// OldMetaData returns the old "meta_data" field's value of the Wechat entity.
// If the Wechat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatMutation) OldMetaData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetaData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetaData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetaData: %w", err)
	}
	return oldValue.MetaData, nil
}

// ClearMetaData clears the value of the "meta_data" field.
func (m *WechatMutation) ClearMetaData() {
	m.meta_data = nil
	m.clearedFields[wechat.FieldMetaData] = struct{}{}
}

// MetaDataCleared returns if the "meta_data" field was cleared in this mutation.
func (m *WechatMutation) MetaDataCleared() bool {
	_, ok := m.clearedFields[wechat.FieldMetaData]
	return ok
}

// ResetMetaData resets all changes to the "meta_data" field.
func (m *WechatMutation) ResetMetaData() {
	m.meta_data = nil
	delete(m.clearedFields, wechat.FieldMetaData)
}

// SetOwnerID sets the "owner" edge to the Member entity by id.
func (m *WechatMutation) SetOwnerID(id int64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Member entity.
func (m *WechatMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the "owner" edge to the Member entity was cleared.
func (m *WechatMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *WechatMutation) OwnerID() (id int64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *WechatMutation) OwnerIDs() (ids []int64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *WechatMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Op returns the operation name.
func (m *WechatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Wechat).
func (m *WechatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WechatMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, wechat.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, wechat.FieldUpdateTime)
	}
	if m.openid != nil {
		fields = append(fields, wechat.FieldOpenid)
	}
	if m.unionId != nil {
		fields = append(fields, wechat.FieldUnionId)
	}
	if m.app_type != nil {
		fields = append(fields, wechat.FieldAppType)
	}
	if m.meta_data != nil {
		fields = append(fields, wechat.FieldMetaData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WechatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wechat.FieldCreateTime:
		return m.CreateTime()
	case wechat.FieldUpdateTime:
		return m.UpdateTime()
	case wechat.FieldOpenid:
		return m.Openid()
	case wechat.FieldUnionId:
		return m.UnionId()
	case wechat.FieldAppType:
		return m.AppType()
	case wechat.FieldMetaData:
		return m.MetaData()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WechatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wechat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case wechat.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case wechat.FieldOpenid:
		return m.OldOpenid(ctx)
	case wechat.FieldUnionId:
		return m.OldUnionId(ctx)
	case wechat.FieldAppType:
		return m.OldAppType(ctx)
	case wechat.FieldMetaData:
		return m.OldMetaData(ctx)
	}
	return nil, fmt.Errorf("unknown Wechat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WechatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wechat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case wechat.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case wechat.FieldOpenid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpenid(v)
		return nil
	case wechat.FieldUnionId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnionId(v)
		return nil
	case wechat.FieldAppType:
		v, ok := value.(wechat.AppType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppType(v)
		return nil
	case wechat.FieldMetaData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetaData(v)
		return nil
	}
	return fmt.Errorf("unknown Wechat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WechatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WechatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WechatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Wechat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WechatMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(wechat.FieldMetaData) {
		fields = append(fields, wechat.FieldMetaData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WechatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WechatMutation) ClearField(name string) error {
	switch name {
	case wechat.FieldMetaData:
		m.ClearMetaData()
		return nil
	}
	return fmt.Errorf("unknown Wechat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WechatMutation) ResetField(name string) error {
	switch name {
	case wechat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case wechat.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case wechat.FieldOpenid:
		m.ResetOpenid()
		return nil
	case wechat.FieldUnionId:
		m.ResetUnionId()
		return nil
	case wechat.FieldAppType:
		m.ResetAppType()
		return nil
	case wechat.FieldMetaData:
		m.ResetMetaData()
		return nil
	}
	return fmt.Errorf("unknown Wechat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WechatMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, wechat.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WechatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case wechat.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WechatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WechatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WechatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, wechat.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WechatMutation) EdgeCleared(name string) bool {
	switch name {
	case wechat.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WechatMutation) ClearEdge(name string) error {
	switch name {
	case wechat.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Wechat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WechatMutation) ResetEdge(name string) error {
	switch name {
	case wechat.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Wechat edge %s", name)
}
