// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realotz/whole/internal/services/users/data/ent/customer"
	"github.com/realotz/whole/internal/services/users/data/ent/wechat"
)

// WechatCreate is the builder for creating a Wechat entity.
type WechatCreate struct {
	config
	mutation *WechatMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wc *WechatCreate) SetCreateTime(t time.Time) *WechatCreate {
	wc.mutation.SetCreateTime(t)
	return wc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wc *WechatCreate) SetNillableCreateTime(t *time.Time) *WechatCreate {
	if t != nil {
		wc.SetCreateTime(*t)
	}
	return wc
}

// SetUpdateTime sets the "update_time" field.
func (wc *WechatCreate) SetUpdateTime(t time.Time) *WechatCreate {
	wc.mutation.SetUpdateTime(t)
	return wc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wc *WechatCreate) SetNillableUpdateTime(t *time.Time) *WechatCreate {
	if t != nil {
		wc.SetUpdateTime(*t)
	}
	return wc
}

// SetOpenid sets the "openid" field.
func (wc *WechatCreate) SetOpenid(s string) *WechatCreate {
	wc.mutation.SetOpenid(s)
	return wc
}

// SetUnionId sets the "unionId" field.
func (wc *WechatCreate) SetUnionId(s string) *WechatCreate {
	wc.mutation.SetUnionId(s)
	return wc
}

// SetAppType sets the "app_type" field.
func (wc *WechatCreate) SetAppType(wt wechat.AppType) *WechatCreate {
	wc.mutation.SetAppType(wt)
	return wc
}

// SetMetaData sets the "meta_data" field.
func (wc *WechatCreate) SetMetaData(b []byte) *WechatCreate {
	wc.mutation.SetMetaData(b)
	return wc
}

// SetCustomersID sets the "customers" edge to the Customer entity by ID.
func (wc *WechatCreate) SetCustomersID(id int64) *WechatCreate {
	wc.mutation.SetCustomersID(id)
	return wc
}

// SetNillableCustomersID sets the "customers" edge to the Customer entity by ID if the given value is not nil.
func (wc *WechatCreate) SetNillableCustomersID(id *int64) *WechatCreate {
	if id != nil {
		wc = wc.SetCustomersID(*id)
	}
	return wc
}

// SetCustomers sets the "customers" edge to the Customer entity.
func (wc *WechatCreate) SetCustomers(c *Customer) *WechatCreate {
	return wc.SetCustomersID(c.ID)
}

// Mutation returns the WechatMutation object of the builder.
func (wc *WechatCreate) Mutation() *WechatMutation {
	return wc.mutation
}

// Save creates the Wechat in the database.
func (wc *WechatCreate) Save(ctx context.Context) (*Wechat, error) {
	var (
		err  error
		node *Wechat
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WechatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WechatCreate) SaveX(ctx context.Context) *Wechat {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (wc *WechatCreate) defaults() {
	if _, ok := wc.mutation.CreateTime(); !ok {
		v := wechat.DefaultCreateTime()
		wc.mutation.SetCreateTime(v)
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		v := wechat.DefaultUpdateTime()
		wc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WechatCreate) check() error {
	if _, ok := wc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := wc.mutation.Openid(); !ok {
		return &ValidationError{Name: "openid", err: errors.New("ent: missing required field \"openid\"")}
	}
	if v, ok := wc.mutation.Openid(); ok {
		if err := wechat.OpenidValidator(v); err != nil {
			return &ValidationError{Name: "openid", err: fmt.Errorf("ent: validator failed for field \"openid\": %w", err)}
		}
	}
	if _, ok := wc.mutation.UnionId(); !ok {
		return &ValidationError{Name: "unionId", err: errors.New("ent: missing required field \"unionId\"")}
	}
	if v, ok := wc.mutation.UnionId(); ok {
		if err := wechat.UnionIdValidator(v); err != nil {
			return &ValidationError{Name: "unionId", err: fmt.Errorf("ent: validator failed for field \"unionId\": %w", err)}
		}
	}
	if _, ok := wc.mutation.AppType(); !ok {
		return &ValidationError{Name: "app_type", err: errors.New("ent: missing required field \"app_type\"")}
	}
	if v, ok := wc.mutation.AppType(); ok {
		if err := wechat.AppTypeValidator(v); err != nil {
			return &ValidationError{Name: "app_type", err: fmt.Errorf("ent: validator failed for field \"app_type\": %w", err)}
		}
	}
	return nil
}

func (wc *WechatCreate) sqlSave(ctx context.Context) (*Wechat, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *WechatCreate) createSpec() (*Wechat, *sqlgraph.CreateSpec) {
	var (
		_node = &Wechat{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wechat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wechat.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechat.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wechat.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := wc.mutation.Openid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechat.FieldOpenid,
		})
		_node.Openid = value
	}
	if value, ok := wc.mutation.UnionId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wechat.FieldUnionId,
		})
		_node.UnionId = value
	}
	if value, ok := wc.mutation.AppType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: wechat.FieldAppType,
		})
		_node.AppType = value
	}
	if value, ok := wc.mutation.MetaData(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: wechat.FieldMetaData,
		})
		_node.MetaData = value
	}
	if nodes := wc.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wechat.CustomersTable,
			Columns: []string{wechat.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_wechats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WechatCreateBulk is the builder for creating many Wechat entities in bulk.
type WechatCreateBulk struct {
	config
	builders []*WechatCreate
}

// Save creates the Wechat entities in the database.
func (wcb *WechatCreateBulk) Save(ctx context.Context) ([]*Wechat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Wechat, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WechatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WechatCreateBulk) SaveX(ctx context.Context) []*Wechat {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
