// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/realotz/whole/internal/apps/users/data/ent/member"
)

// Member is the model entity for the Member schema.
type Member struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Sex holds the value of the "sex" field.
	// 性别
	Sex member.Sex `json:"sex,omitempty"`
	// UUID holds the value of the "uuid" field.
	// uuid
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Account holds the value of the "account" field.
	//  账号
	Account string `json:"account,omitempty"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name,omitempty"`
	// Role holds the value of the "role" field.
	// 角色
	Role string `json:"role,omitempty"`
	// NickName holds the value of the "nick_name" field.
	// 昵称
	NickName string `json:"nick_name,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// Mobile holds the value of the "mobile" field.
	// 手机号
	Mobile string `json:"mobile,omitempty"`
	// IDCard holds the value of the "id_card" field.
	// 身份证
	IDCard string `json:"id_card,omitempty"`
	// Birthday holds the value of the "birthday" field.
	// 生日
	Birthday time.Time `json:"birthday,omitempty"`
	// Password holds the value of the "password" field.
	// 密码
	Password string `json:"password,omitempty"`
	// Salt holds the value of the "salt" field.
	// 加密盐
	Salt string `json:"salt,omitempty"`
	// LastIP holds the value of the "last_ip" field.
	// 最后登陆ip
	LastIP string `json:"last_ip,omitempty"`
	// LastTime holds the value of the "last_time" field.
	// 最后登陆时间
	LastTime time.Time `json:"last_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberQuery when eager-loading is set.
	Edges MemberEdges `json:"edges"`
}

// MemberEdges holds the relations/edges for other nodes in the graph.
type MemberEdges struct {
	// Wechats holds the value of the wechats edge.
	Wechats []*Wechat `json:"wechats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WechatsOrErr returns the Wechats value or an error if the edge
// was not loaded in eager-loading.
func (e MemberEdges) WechatsOrErr() ([]*Wechat, error) {
	if e.loadedTypes[0] {
		return e.Wechats, nil
	}
	return nil, &NotLoadedError{edge: "wechats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Member) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			values[i] = &sql.NullInt64{}
		case member.FieldSex, member.FieldAccount, member.FieldName, member.FieldRole, member.FieldNickName, member.FieldEmail, member.FieldMobile, member.FieldIDCard, member.FieldPassword, member.FieldSalt, member.FieldLastIP:
			values[i] = &sql.NullString{}
		case member.FieldCreateTime, member.FieldUpdateTime, member.FieldBirthday, member.FieldLastTime:
			values[i] = &sql.NullTime{}
		case member.FieldUUID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Member", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Member fields.
func (m *Member) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case member.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case member.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case member.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case member.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				m.Sex = member.Sex(value.String)
			}
		case member.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				m.UUID = *value
			}
		case member.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				m.Account = value.String
			}
		case member.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case member.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				m.Role = value.String
			}
		case member.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nick_name", values[i])
			} else if value.Valid {
				m.NickName = value.String
			}
		case member.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				m.Email = value.String
			}
		case member.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				m.Mobile = value.String
			}
		case member.FieldIDCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card", values[i])
			} else if value.Valid {
				m.IDCard = value.String
			}
		case member.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				m.Birthday = value.Time
			}
		case member.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				m.Password = value.String
			}
		case member.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				m.Salt = value.String
			}
		case member.FieldLastIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_ip", values[i])
			} else if value.Valid {
				m.LastIP = value.String
			}
		case member.FieldLastTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_time", values[i])
			} else if value.Valid {
				m.LastTime = value.Time
			}
		}
	}
	return nil
}

// QueryWechats queries the "wechats" edge of the Member entity.
func (m *Member) QueryWechats() *WechatQuery {
	return (&MemberClient{config: m.config}).QueryWechats(m)
}

// Update returns a builder for updating this Member.
// Note that you need to call Member.Unwrap() before calling this method if this Member
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Member) Update() *MemberUpdateOne {
	return (&MemberClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Member entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Member) Unwrap() *Member {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Member is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Member) String() string {
	var builder strings.Builder
	builder.WriteString("Member(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", m.Sex))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", m.UUID))
	builder.WriteString(", account=")
	builder.WriteString(m.Account)
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", role=")
	builder.WriteString(m.Role)
	builder.WriteString(", nick_name=")
	builder.WriteString(m.NickName)
	builder.WriteString(", email=")
	builder.WriteString(m.Email)
	builder.WriteString(", mobile=")
	builder.WriteString(m.Mobile)
	builder.WriteString(", id_card=")
	builder.WriteString(m.IDCard)
	builder.WriteString(", birthday=")
	builder.WriteString(m.Birthday.Format(time.ANSIC))
	builder.WriteString(", password=")
	builder.WriteString(m.Password)
	builder.WriteString(", salt=")
	builder.WriteString(m.Salt)
	builder.WriteString(", last_ip=")
	builder.WriteString(m.LastIP)
	builder.WriteString(", last_time=")
	builder.WriteString(m.LastTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Members is a parsable slice of Member.
type Members []*Member

func (m Members) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
