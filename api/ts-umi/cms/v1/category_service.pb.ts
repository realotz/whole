// @ts-ignore
/* eslint-disable */
// Code generated by protoc-gen-ts-umi. DO NOT EDIT.
import {request} from 'umi';

const APIService = '/api';
// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.

type Options = {
  [key: string]: any
}

/** List  /api */
export async function List(params: CmsV1.CategoryListOption, options?: Options) {
	return request<CmsV1.CategoryList>(APIService + '/cms/category', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** Get  /api */
export async function Get(params: CmsV1.CategoryGetOption, options?: Options) {
	return request<CmsV1.Category>(APIService + '/cms/category/{id}', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** Create  /api */
export async function Create(params: CmsV1.CategoryGetOption, options?: Options) {
	return request<CmsV1.Category>(APIService + '/cms/category', {
    	method: 'POST',
    	data: {...params},
    	...(options || {}),
	});
}

/** Update  /api */
export async function Update(params: CmsV1.CategoryUpdateOption, options?: Options) {
	return request<CmsV1.Category>(APIService + '/cms/category', {
    	method: 'PUT',
    	data: {...params},
    	...(options || {}),
	});
}

/** Delete  /api */
export async function Delete(params: CmsV1.CategoryDeleteOption, options?: Options) {
	return request<CmsV1.Category>(APIService + '/cms/category/{id}', {
    	method: 'DELETE',
    	data: {...params},
    	...(options || {}),
	});
}

