// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
	"io/ioutil"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = binding.MapProto
var _ = mux.NewRouter

const _ = http1.SupportPackageIsVersion1

func NewFileFormServiceHandler(srv FileServiceHandler, opts ...http1.HandleOption) http.Handler {
	h := http1.DefaultHandleOptions()
	for _, o := range opts {
		o(&h)
	}
	r := mux.NewRouter()

	r.HandleFunc("/systems/form/file", func(w http.ResponseWriter, r *http.Request) {
		var in FileCreateOption
		next := func(ctx context.Context, req interface{}) (interface{}, error) {
			msg := req.(*FileCreateOption)
			formFile, header, err := r.FormFile("file")
			if err != nil {
				return nil, err
			}
			defer formFile.Close()
			msg.Name = header.Filename
			msg.Size = header.Size
			msg.Data, err = ioutil.ReadAll(formFile)
			if err != nil {
				return nil, err
			}
			return srv.Create(ctx, msg)
		}
		if h.Middleware != nil {
			next = h.Middleware(next)
		}
		out, err := next(r.Context(), &in)
		if err != nil {
			h.Error(w, r, err)
			return
		}
		reply := out.(*FileList)
		if err := h.Encode(w, r, reply); err != nil {
			h.Error(w, r, err)
		}
	}).Methods("POST")

	return r
}
