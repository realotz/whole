// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	//常规账户登录接口
	Login(ctx context.Context, in *EmployeeLogin, opts ...grpc.CallOption) (*EmployeeLoginRes, error)
	//验证码登录
	LoginForCode(ctx context.Context, in *EmployeeLogin, opts ...grpc.CallOption) (*EmployeeLoginRes, error)
	//登出
	Logout(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*NullReply, error)
	//当前登录用户信息
	UserInfo(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*Employee, error)
	//发送短信/邮箱验证码
	Captcha(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*NullReply, error)
	//账户列表
	List(ctx context.Context, in *EmployeeListOption, opts ...grpc.CallOption) (*EmployeeList, error)
	//获取账户信息
	Get(ctx context.Context, in *EmployeeGetOption, opts ...grpc.CallOption) (*Employee, error)
	//新建一个账户
	Create(ctx context.Context, in *EmployeeOption, opts ...grpc.CallOption) (*Employee, error)
	//更新一个账户
	Update(ctx context.Context, in *EmployeeOption, opts ...grpc.CallOption) (*Employee, error)
	//删除一个账户
	Delete(ctx context.Context, in *EmployeeDeleteOption, opts ...grpc.CallOption) (*NullReply, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) Login(ctx context.Context, in *EmployeeLogin, opts ...grpc.CallOption) (*EmployeeLoginRes, error) {
	out := new(EmployeeLoginRes)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) LoginForCode(ctx context.Context, in *EmployeeLogin, opts ...grpc.CallOption) (*EmployeeLoginRes, error) {
	out := new(EmployeeLoginRes)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/LoginForCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Logout(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UserInfo(ctx context.Context, in *NullReq, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Captcha(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Captcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) List(ctx context.Context, in *EmployeeListOption, opts ...grpc.CallOption) (*EmployeeList, error) {
	out := new(EmployeeList)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Get(ctx context.Context, in *EmployeeGetOption, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Create(ctx context.Context, in *EmployeeOption, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Update(ctx context.Context, in *EmployeeOption, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Delete(ctx context.Context, in *EmployeeDeleteOption, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := c.cc.Invoke(ctx, "/users.v1.EmployeeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility
type EmployeeServiceServer interface {
	//常规账户登录接口
	Login(context.Context, *EmployeeLogin) (*EmployeeLoginRes, error)
	//验证码登录
	LoginForCode(context.Context, *EmployeeLogin) (*EmployeeLoginRes, error)
	//登出
	Logout(context.Context, *NullReq) (*NullReply, error)
	//当前登录用户信息
	UserInfo(context.Context, *NullReq) (*Employee, error)
	//发送短信/邮箱验证码
	Captcha(context.Context, *CaptchaReq) (*NullReply, error)
	//账户列表
	List(context.Context, *EmployeeListOption) (*EmployeeList, error)
	//获取账户信息
	Get(context.Context, *EmployeeGetOption) (*Employee, error)
	//新建一个账户
	Create(context.Context, *EmployeeOption) (*Employee, error)
	//更新一个账户
	Update(context.Context, *EmployeeOption) (*Employee, error)
	//删除一个账户
	Delete(context.Context, *EmployeeDeleteOption) (*NullReply, error)
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeServiceServer struct {
}

func (UnimplementedEmployeeServiceServer) Login(context.Context, *EmployeeLogin) (*EmployeeLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedEmployeeServiceServer) LoginForCode(context.Context, *EmployeeLogin) (*EmployeeLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginForCode not implemented")
}
func (UnimplementedEmployeeServiceServer) Logout(context.Context, *NullReq) (*NullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedEmployeeServiceServer) UserInfo(context.Context, *NullReq) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedEmployeeServiceServer) Captcha(context.Context, *CaptchaReq) (*NullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Captcha not implemented")
}
func (UnimplementedEmployeeServiceServer) List(context.Context, *EmployeeListOption) (*EmployeeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEmployeeServiceServer) Get(context.Context, *EmployeeGetOption) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEmployeeServiceServer) Create(context.Context, *EmployeeOption) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEmployeeServiceServer) Update(context.Context, *EmployeeOption) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEmployeeServiceServer) Delete(context.Context, *EmployeeDeleteOption) (*NullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Login(ctx, req.(*EmployeeLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_LoginForCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).LoginForCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/LoginForCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).LoginForCode(ctx, req.(*EmployeeLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Logout(ctx, req.(*NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UserInfo(ctx, req.(*NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Captcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Captcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Captcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Captcha(ctx, req.(*CaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeListOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).List(ctx, req.(*EmployeeListOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeGetOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Get(ctx, req.(*EmployeeGetOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Create(ctx, req.(*EmployeeOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Update(ctx, req.(*EmployeeOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeDeleteOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.EmployeeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Delete(ctx, req.(*EmployeeDeleteOption))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.v1.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _EmployeeService_Login_Handler,
		},
		{
			MethodName: "LoginForCode",
			Handler:    _EmployeeService_LoginForCode_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _EmployeeService_Logout_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _EmployeeService_UserInfo_Handler,
		},
		{
			MethodName: "Captcha",
			Handler:    _EmployeeService_Captcha_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EmployeeService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EmployeeService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EmployeeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EmployeeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmployeeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/v1/employee.proto",
}
