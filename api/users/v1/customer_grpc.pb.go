// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	comm "github.com/realotz/whole/api/comm"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	//常规账户登录接口
	Login(ctx context.Context, in *CustomerLogin, opts ...grpc.CallOption) (*CustomerLoginRes, error)
	//验证码登录
	LoginForCode(ctx context.Context, in *CustomerLogin, opts ...grpc.CallOption) (*CustomerLoginRes, error)
	//登出
	Logout(ctx context.Context, in *comm.NullReq, opts ...grpc.CallOption) (*comm.NullReply, error)
	//当前登录用户信息
	UserInfo(ctx context.Context, in *comm.NullReq, opts ...grpc.CallOption) (*Customer, error)
	//发送短信/邮箱验证码
	Captcha(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*comm.NullReply, error)
	//账户列表
	List(ctx context.Context, in *CustomerListOption, opts ...grpc.CallOption) (*CustomerList, error)
	//获取账户信息
	Get(ctx context.Context, in *CustomerGetOption, opts ...grpc.CallOption) (*Customer, error)
	//更新用户信息
	Update(ctx context.Context, in *CustomerOption, opts ...grpc.CallOption) (*Customer, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Login(ctx context.Context, in *CustomerLogin, opts ...grpc.CallOption) (*CustomerLoginRes, error) {
	out := new(CustomerLoginRes)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) LoginForCode(ctx context.Context, in *CustomerLogin, opts ...grpc.CallOption) (*CustomerLoginRes, error) {
	out := new(CustomerLoginRes)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/LoginForCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Logout(ctx context.Context, in *comm.NullReq, opts ...grpc.CallOption) (*comm.NullReply, error) {
	out := new(comm.NullReply)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UserInfo(ctx context.Context, in *comm.NullReq, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Captcha(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*comm.NullReply, error) {
	out := new(comm.NullReply)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/Captcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) List(ctx context.Context, in *CustomerListOption, opts ...grpc.CallOption) (*CustomerList, error) {
	out := new(CustomerList)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Get(ctx context.Context, in *CustomerGetOption, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Update(ctx context.Context, in *CustomerOption, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/users.v1.CustomerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	//常规账户登录接口
	Login(context.Context, *CustomerLogin) (*CustomerLoginRes, error)
	//验证码登录
	LoginForCode(context.Context, *CustomerLogin) (*CustomerLoginRes, error)
	//登出
	Logout(context.Context, *comm.NullReq) (*comm.NullReply, error)
	//当前登录用户信息
	UserInfo(context.Context, *comm.NullReq) (*Customer, error)
	//发送短信/邮箱验证码
	Captcha(context.Context, *CaptchaReq) (*comm.NullReply, error)
	//账户列表
	List(context.Context, *CustomerListOption) (*CustomerList, error)
	//获取账户信息
	Get(context.Context, *CustomerGetOption) (*Customer, error)
	//更新用户信息
	Update(context.Context, *CustomerOption) (*Customer, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) Login(context.Context, *CustomerLogin) (*CustomerLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCustomerServiceServer) LoginForCode(context.Context, *CustomerLogin) (*CustomerLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginForCode not implemented")
}
func (UnimplementedCustomerServiceServer) Logout(context.Context, *comm.NullReq) (*comm.NullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedCustomerServiceServer) UserInfo(context.Context, *comm.NullReq) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedCustomerServiceServer) Captcha(context.Context, *CaptchaReq) (*comm.NullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Captcha not implemented")
}
func (UnimplementedCustomerServiceServer) List(context.Context, *CustomerListOption) (*CustomerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCustomerServiceServer) Get(context.Context, *CustomerGetOption) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCustomerServiceServer) Update(context.Context, *CustomerOption) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Login(ctx, req.(*CustomerLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_LoginForCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).LoginForCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/LoginForCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).LoginForCode(ctx, req.(*CustomerLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Logout(ctx, req.(*comm.NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.NullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UserInfo(ctx, req.(*comm.NullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Captcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Captcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/Captcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Captcha(ctx, req.(*CaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerListOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).List(ctx, req.(*CustomerListOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Get(ctx, req.(*CustomerGetOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.v1.CustomerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Update(ctx, req.(*CustomerOption))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.v1.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CustomerService_Login_Handler,
		},
		{
			MethodName: "LoginForCode",
			Handler:    _CustomerService_LoginForCode_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _CustomerService_Logout_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _CustomerService_UserInfo_Handler,
		},
		{
			MethodName: "Captcha",
			Handler:    _CustomerService_Captcha_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomerService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomerService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/v1/customer.proto",
}
